Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.tokenize = tokenize;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tokenizer2 = require('tokenizer2');

var _tokenizer22 = _interopRequireDefault(_tokenizer2);

/**
 * Copy pasted most of this from json-tokenizer package
 * https://github.com/Floby/node-json-tokenizer/blob/master/JsonTokenizer.js
 * 
 * @return {Stream} a token stream describing the JSON grammar.
 */
'use babel';

function createTokenStream() {
  var stream = (0, _tokenizer22['default'])();
  stream.addRule(/^,$/, TokenType.COMMA);
  stream.addRule(/^:$/, TokenType.END_LABEL);
  stream.addRule(/^\{$/, TokenType.BEGIN_OBJECT);
  stream.addRule(/^\}$/, TokenType.END_OBJECT);
  stream.addRule(/^\[$/, TokenType.BEGIN_ARRAY);
  stream.addRule(/^\]$/, TokenType.END_ARRAY);

  stream.addRule(/^"(\\["\\/bfnrtu"]|[^"\\"])*"$/, TokenType.STRING);
  stream.addRule(/^"([^"]|\\")*$/, 'maybe-string');
  stream.addRule(/^null$/, TokenType.NULL);
  stream.addRule(/^(true|false)$/, TokenType.BOOLEAN);

  stream.addRule(/^-?\d+(\.\d+)?([eE]-?\d+)?$/, TokenType.NUMBER);
  stream.addRule(/^-?\d+\.$/, 'maybe-decimal-number');
  stream.addRule(/^-$/, 'maybe-negative-number');
  stream.addRule(/^-?\d+(\.\d+)?([eE])?$/, 'maybe-exponential-number');
  stream.addRule(/^-?\d+(\.\d+)?([eE]-)?$/, 'maybe-exponential-number-negative');

  stream.addRule(/^\w+$/, TokenType.SYMBOL);

  stream.addRule(/^[\s]+$/, TokenType.WHITESPACE);

  return stream;
}

var TokenType = {
  COMMA: 'comma',
  END_LABEL: 'end-label',
  BEGIN_OBJECT: 'begin-object',
  END_OBJECT: 'end-object',
  BEGIN_ARRAY: 'begin-array',
  END_ARRAY: 'end-array',
  STRING: 'string',
  NULL: 'null',
  BOOLEAN: 'boolean',
  NUMBER: 'number',
  SYMBOL: 'symbol',
  WHITESPACE: 'whitespace'
};

exports.TokenType = TokenType;
/**
 * Tokenizes the given buffer
 * @param {Buffer} buffer A Buffer to tokenize
 * @return {Promise} a Promise, which when resolved yields the JSON tokens in the buffer as an array
 */

function tokenize(buffer) {
  return new Promise(function (resolve, reject) {
    var tokens = [];
    var tokenStream = createTokenStream();
    tokenStream.on('data', function (token) {
      // Ignore whitespace.
      if (token.type !== TokenType.WHITESPACE) {
        tokens.push(token);
      }
    });
    tokenStream.on('error', function (error) {
      return reject(error);
    });
    tokenStream.on('end', function () {
      return resolve(tokens);
    });
    tokenStream.end(buffer);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3lvc2hpbm9yaXlhbWFndWNoaS9kb3RmaWxlcy8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtanNvbi9zcmMvdG9rZW5pemVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7MEJBRXVCLFlBQVk7Ozs7Ozs7Ozs7QUFGbkMsV0FBVyxDQUFBOztBQVVYLFNBQVMsaUJBQWlCLEdBQUc7QUFDM0IsTUFBTSxNQUFNLEdBQUcsOEJBQVksQ0FBQTtBQUMzQixRQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDdEMsUUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzFDLFFBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUM5QyxRQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDNUMsUUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQzdDLFFBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTs7QUFFM0MsUUFBTSxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDbEUsUUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQTtBQUNoRCxRQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDeEMsUUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7O0FBRW5ELFFBQU0sQ0FBQyxPQUFPLENBQUMsNkJBQTZCLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQy9ELFFBQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLHNCQUFzQixDQUFDLENBQUE7QUFDbkQsUUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtBQUM5QyxRQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLDBCQUEwQixDQUFDLENBQUE7QUFDcEUsUUFBTSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFBOztBQUU5RSxRQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7O0FBRXpDLFFBQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7QUFFL0MsU0FBTyxNQUFNLENBQUE7Q0FDZDs7QUFFTSxJQUFNLFNBQVMsR0FBRztBQUN2QixPQUFLLEVBQUUsT0FBTztBQUNkLFdBQVMsRUFBRSxXQUFXO0FBQ3RCLGNBQVksRUFBRSxjQUFjO0FBQzVCLFlBQVUsRUFBRSxZQUFZO0FBQ3hCLGFBQVcsRUFBRSxhQUFhO0FBQzFCLFdBQVMsRUFBRSxXQUFXO0FBQ3RCLFFBQU0sRUFBRSxRQUFRO0FBQ2hCLE1BQUksRUFBRSxNQUFNO0FBQ1osU0FBTyxFQUFFLFNBQVM7QUFDbEIsUUFBTSxFQUFFLFFBQVE7QUFDaEIsUUFBTSxFQUFFLFFBQVE7QUFDaEIsWUFBVSxFQUFFLFlBQVk7Q0FDekIsQ0FBQTs7Ozs7Ozs7O0FBT00sU0FBUyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQy9CLFNBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFFBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtBQUNqQixRQUFNLFdBQVcsR0FBRyxpQkFBaUIsRUFBRSxDQUFBO0FBQ3ZDLGVBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUEsS0FBSyxFQUFJOztBQUU5QixVQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRTtBQUN2QyxjQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO09BQ25CO0tBQ0YsQ0FBQyxDQUFBO0FBQ0YsZUFBVyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQSxLQUFLO2FBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztLQUFBLENBQUMsQ0FBQTtBQUMvQyxlQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTthQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FBQSxDQUFDLENBQUE7QUFDNUMsZUFBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtHQUN4QixDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiIvaG9tZS95b3NoaW5vcml5YW1hZ3VjaGkvZG90ZmlsZXMvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLWpzb24vc3JjL3Rva2VuaXplci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB0b2tlbml6ZXIyIGZyb20gJ3Rva2VuaXplcjInXG5cbi8qKlxuICogQ29weSBwYXN0ZWQgbW9zdCBvZiB0aGlzIGZyb20ganNvbi10b2tlbml6ZXIgcGFja2FnZVxuICogaHR0cHM6Ly9naXRodWIuY29tL0Zsb2J5L25vZGUtanNvbi10b2tlbml6ZXIvYmxvYi9tYXN0ZXIvSnNvblRva2VuaXplci5qc1xuICogXG4gKiBAcmV0dXJuIHtTdHJlYW19IGEgdG9rZW4gc3RyZWFtIGRlc2NyaWJpbmcgdGhlIEpTT04gZ3JhbW1hci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9rZW5TdHJlYW0oKSB7XG4gIGNvbnN0IHN0cmVhbSA9IHRva2VuaXplcjIoKVxuICBzdHJlYW0uYWRkUnVsZSgvXiwkLywgVG9rZW5UeXBlLkNPTU1BKVxuICBzdHJlYW0uYWRkUnVsZSgvXjokLywgVG9rZW5UeXBlLkVORF9MQUJFTClcbiAgc3RyZWFtLmFkZFJ1bGUoL15cXHskLywgVG9rZW5UeXBlLkJFR0lOX09CSkVDVClcbiAgc3RyZWFtLmFkZFJ1bGUoL15cXH0kLywgVG9rZW5UeXBlLkVORF9PQkpFQ1QpXG4gIHN0cmVhbS5hZGRSdWxlKC9eXFxbJC8sIFRva2VuVHlwZS5CRUdJTl9BUlJBWSlcbiAgc3RyZWFtLmFkZFJ1bGUoL15cXF0kLywgVG9rZW5UeXBlLkVORF9BUlJBWSlcblxuICBzdHJlYW0uYWRkUnVsZSgvXlwiKFxcXFxbXCJcXFxcL2JmbnJ0dVwiXXxbXlwiXFxcXFwiXSkqXCIkLywgVG9rZW5UeXBlLlNUUklORylcbiAgc3RyZWFtLmFkZFJ1bGUoL15cIihbXlwiXXxcXFxcXCIpKiQvLCAnbWF5YmUtc3RyaW5nJylcbiAgc3RyZWFtLmFkZFJ1bGUoL15udWxsJC8sIFRva2VuVHlwZS5OVUxMKVxuICBzdHJlYW0uYWRkUnVsZSgvXih0cnVlfGZhbHNlKSQvLCBUb2tlblR5cGUuQk9PTEVBTilcblxuICBzdHJlYW0uYWRkUnVsZSgvXi0/XFxkKyhcXC5cXGQrKT8oW2VFXS0/XFxkKyk/JC8sIFRva2VuVHlwZS5OVU1CRVIpXG4gIHN0cmVhbS5hZGRSdWxlKC9eLT9cXGQrXFwuJC8sICdtYXliZS1kZWNpbWFsLW51bWJlcicpXG4gIHN0cmVhbS5hZGRSdWxlKC9eLSQvLCAnbWF5YmUtbmVnYXRpdmUtbnVtYmVyJylcbiAgc3RyZWFtLmFkZFJ1bGUoL14tP1xcZCsoXFwuXFxkKyk/KFtlRV0pPyQvLCAnbWF5YmUtZXhwb25lbnRpYWwtbnVtYmVyJylcbiAgc3RyZWFtLmFkZFJ1bGUoL14tP1xcZCsoXFwuXFxkKyk/KFtlRV0tKT8kLywgJ21heWJlLWV4cG9uZW50aWFsLW51bWJlci1uZWdhdGl2ZScpXG5cbiAgc3RyZWFtLmFkZFJ1bGUoL15cXHcrJC8sIFRva2VuVHlwZS5TWU1CT0wpXG5cbiAgc3RyZWFtLmFkZFJ1bGUoL15bXFxzXSskLywgVG9rZW5UeXBlLldISVRFU1BBQ0UpXG5cbiAgcmV0dXJuIHN0cmVhbVxufVxuXG5leHBvcnQgY29uc3QgVG9rZW5UeXBlID0ge1xuICBDT01NQTogJ2NvbW1hJyxcbiAgRU5EX0xBQkVMOiAnZW5kLWxhYmVsJyxcbiAgQkVHSU5fT0JKRUNUOiAnYmVnaW4tb2JqZWN0JyxcbiAgRU5EX09CSkVDVDogJ2VuZC1vYmplY3QnLFxuICBCRUdJTl9BUlJBWTogJ2JlZ2luLWFycmF5JyxcbiAgRU5EX0FSUkFZOiAnZW5kLWFycmF5JyxcbiAgU1RSSU5HOiAnc3RyaW5nJyxcbiAgTlVMTDogJ251bGwnLFxuICBCT09MRUFOOiAnYm9vbGVhbicsXG4gIE5VTUJFUjogJ251bWJlcicsXG4gIFNZTUJPTDogJ3N5bWJvbCcsXG4gIFdISVRFU1BBQ0U6ICd3aGl0ZXNwYWNlJ1xufVxuXG4vKipcbiAqIFRva2VuaXplcyB0aGUgZ2l2ZW4gYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIEEgQnVmZmVyIHRvIHRva2VuaXplXG4gKiBAcmV0dXJuIHtQcm9taXNlfSBhIFByb21pc2UsIHdoaWNoIHdoZW4gcmVzb2x2ZWQgeWllbGRzIHRoZSBKU09OIHRva2VucyBpbiB0aGUgYnVmZmVyIGFzIGFuIGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZShidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0b2tlbnMgPSBbXVxuICAgIGNvbnN0IHRva2VuU3RyZWFtID0gY3JlYXRlVG9rZW5TdHJlYW0oKVxuICAgIHRva2VuU3RyZWFtLm9uKCdkYXRhJywgdG9rZW4gPT4ge1xuICAgICAgLy8gSWdub3JlIHdoaXRlc3BhY2UuXG4gICAgICBpZiAodG9rZW4udHlwZSAhPT0gVG9rZW5UeXBlLldISVRFU1BBQ0UpIHtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pXG4gICAgICB9XG4gICAgfSlcbiAgICB0b2tlblN0cmVhbS5vbignZXJyb3InLCBlcnJvciA9PiByZWplY3QoZXJyb3IpKVxuICAgIHRva2VuU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKHRva2VucykpXG4gICAgdG9rZW5TdHJlYW0uZW5kKGJ1ZmZlcilcbiAgfSlcbn1cbiJdfQ==